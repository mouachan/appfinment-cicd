  // define commands
  def mvnCmd = "mvn"
  // injection of environment variables is not done so set them here...
  def sourceRef = "master"
  def sourceUrl = "https://github.com/mouachan/appfinment"
  def githubId = "appfinment-cicd-github"
  def devProject = "appfinment"
  def applicationName = "appfinment"
  def artifact = "openidconnect-gateway"
  def version = "1.0.0"
// namespaces
def namespace_dev = "appfinmentdev-lab"
def namespace_acp = "appfinmentacp-lab"
def namespace_prd = "appfinmentprd-lab"		
def appname = "appfinment"
def image_version = "${ENV.IMAGE_VERSION}"
def registry = "docker-registry.default.svc:5000"

// maven variables

def generateConfigMap(namespace) {
  pom = readMavenPom file: 'pom.xml'
  artifact = pom.artifactId
  version = pom.version
  echo "===== >${pom} ${pom.artifact} ${pom.version}"
  sh "oc delete cm ${artifact} -n ${namespace} --ignore-not-found=true"
	sh "oc create cm ${artifact} --from-file=src/main/resources/application.properties -n ${namespace}"
	return 0
}
def setEnvVars(namespace){
    def sso_server
    def sso_realm
    def sso_key
    
    if ( "${namespace}" == "appfinmentdev-lab") {
        sso_server='<server>'
        sso_realm='<realm>'
        sso_key='<key>'
    } else {
        // at the moment we keep the same info as dev
        sso_server='<server>'
        sso_realm='<realm>'
        sso_key=''
    }
    
    sh "oc set env -n ${namespace} dc/openidconnect-gateway SSO_SERVER_URL=${sso_server}"
    sh "oc set env -n ${namespace} dc/openidconnect-gateway SSO_REALM=${sso_realm}"
    sh "oc set env -n ${namespace} dc/openidconnect-gateway SSO_SERVER_RSA_PUBLIC_KEY=${sso_key}"
}

node('maven') {
  stage 'checkout'
     git branch: sourceRef, url: sourceUrl, credentialsId: githubId
  stage 'build'
     sh "ls -ail /tmp/workspace/appfinment-cicd/appfinment-cicd-appfinment-bc"
     sh "${mvnCmd} clean install -DskipTests=true"
  stage 'test'
    sh "${mvnCmd} test"
  stage 'deployInDev'
      echo "building container image"
    	sh "${mvnCmd} fabric8:build -Dmaven.test.skip -Dimage.version=latest -Dfabric8.namespace=${namespace_dev}"
      sh "oc delete cm ${artifact} -n ${namespace_dev} --ignore-not-found=true"
	    sh "oc create cm ${artifact} --from-file=src/main/resources/application.properties -n ${namespace_dev}"
      echo "configuring Red Hat SSO parameters"
      setEnvVars(namespace_dev)
  stage 'deployInAcp'
     echo "creating openshift deployment objects"
		 echo "generating ConfigMap"
		 sh "oc delete cm ${artifact} -n ${namespace_acp} --ignore-not-found=true"
	   sh "oc create cm ${artifact} --from-file=src/main/resources/application.properties -n ${namespace_acp}"
     sh "oc process openidconnect-template -n appfinment-cicd --param APP_NAME=${artifact} --param APP_VERSION=${version} --param IMAGE_VERSION=${image_version} | oc apply -n ${namespace_acp} -f -"
		 setEnvVars(namespace_acp)
}

